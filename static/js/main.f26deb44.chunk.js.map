{"version":3,"sources":["icons/lampada.svg","components/Header/index.js","components/AddNote/index.js","icons/trash.svg","components/Note/index.js","components/NotesList/index.js","icons/searchIcon.svg","components/Search/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Header","handleToggleDarkMode","className","onClick","previousDarkMode","src","Lampada","AddNote","handleAddNote","useState","noteText","setNoteText","rows","cols","placeholder","onChange","event","target","value","length","trim","console","log","Note","id","text","date","hour","handleDeleteNote","cardStyle","backgroundColor","color","style","TrashIcon","NotesList","notes","map","note","reverse","Search","handleSearchNote","SearchIcon","type","App","setNotes","searchText","setSearchText","darkMode","setDarkMode","corAleatoria","Math","floor","random","useEffect","savedNotes","JSON","parse","localStorage","getItem","darkModeStatus","setItem","stringify","filter","toLowerCase","includes","Date","newNote","nanoid","toLocaleDateString","toLocaleTimeString","newNotes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f26deb44.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lampada.4ca41fbb.svg\";","import React from 'react';\r\nimport '../Header/styles.css';\r\nimport Lampada from '../../icons/lampada.svg'\r\n\r\nexport default function Header( {handleToggleDarkMode }){\r\n    return(\r\n        <div className=\"headerStyle\">\r\n            <h2>Me Anota</h2>\r\n            \r\n            <button \r\n            onClick={ () => handleToggleDarkMode( (previousDarkMode) => !previousDarkMode)}\r\n            className=\"buttonDarkMode\">\r\n                <img src={Lampada}></img>\r\n                <spam>Modo Escuro</spam>\r\n            </button>\r\n            \r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport '../AddNote/styles.css'\r\n\r\nexport default function AddNote( {handleAddNote} ){\r\n    const [noteText, setNoteText] = useState('');\r\n    const [countWords, setCountWords] = useState(0);\r\n    const characterLimit = 140;\r\n\r\n\r\n    function handleChange(event){\r\n        if(characterLimit - event.target.value.length >=0){\r\n            setNoteText(event.target.value);\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    function handleSaveClick(){\r\n        if(noteText.trim().length > 0){\r\n            handleAddNote(noteText);\r\n            setNoteText('')\r\n        }else{\r\n            //ADicionar aviso\r\n            console.log(\"Digite alguma coisa\")\r\n        }\r\n        \r\n\r\n    }\r\n    return(\r\n        <div className=\"addNote new\">\r\n            <textarea \r\n            rows=\"8\" \r\n            cols=\"10\"\r\n            placeholder=\"Digite uma nota...\"\r\n            className=\"note-textarea new\"\r\n            onChange={handleChange}\r\n            value={noteText}\r\n            >\r\n\r\n            </textarea>\r\n            <div className=\"note-footer\">\r\n                <small>{characterLimit - noteText.length} Caracteres Restantes</small>\r\n                <button className=\"saveButton\" onClick={handleSaveClick}>Salvar</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/trash.4cfa926f.svg\";","import React from 'react'\r\nimport '../Note/styles.css'\r\nimport TrashIcon from '../../icons/trash.svg'\r\nexport default function Note({id, text, date, hour, handleDeleteNote, color}){\r\n\r\n    \r\n\r\n\r\n    const cardStyle = {\r\n        backgroundColor: color,\r\n    }\r\n\r\n    return(\r\n        <div className=\"note\" style={cardStyle}>\r\n            <span>{text}</span>\r\n            <div className=\"note-footer\">\r\n                <small>{date} - {hour}</small>\r\n\r\n                <img className=\"delete-icon\"\r\n                src={TrashIcon}\r\n                onClick={() => handleDeleteNote(id)}\r\n                ></img>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport AddNote from '../AddNote';\r\nimport Note from '../Note';\r\nimport '../NotesList/styles.css';\r\n\r\nexport default function NotesList( {notes, handleAddNote, handleDeleteNote}){\r\n    return(\r\n        <div className=\"notes-list\">\r\n\r\n            <AddNote handleAddNote={handleAddNote}/>\r\n            \r\n            {notes.map( (note)=> (\r\n                    <Note id={note.id} text={note.text} date={note.date} hour={note.hour} color={note.color}\r\n                    handleDeleteNote={handleDeleteNote}/>)\r\n                \r\n                \r\n            ).reverse()}\r\n            \r\n\r\n            \r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/searchIcon.1273aebc.svg\";","import React from 'react'\r\nimport '../Search/styles.css'\r\nimport SearchIcon from '../../icons/searchIcon.svg'\r\n\r\nexport default function Search( {handleSearchNote }){\r\n    return(\r\n        <div className=\"search\">\r\n            <img src={SearchIcon} className=\"searchIcon\"></img>\r\n            <input\r\n            type=\"text\"\r\n            placeholder=\"Digite para procurar...\"\r\n            onChange={ (event) => handleSearchNote(event.target.value) }\r\n            >\r\n            </input>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport NotesList from './components/NotesList';\nimport {nanoid} from 'nanoid'\nimport Search from \"./components/Search\";\n\nexport default function App() {\n\tconst [notes, setNotes] = useState([]);\n\n\tconst [searchText, setSearchText] = useState('');\n\n\tconst [darkMode, setDarkMode] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst savedNotes = JSON.parse(localStorage.getItem('react-notes-app-data'));\n\t\tconst darkModeStatus = JSON.parse(localStorage.getItem('darkMode'));\n\n\t\tif(savedNotes){\n\t\t\tsetNotes(savedNotes);\n\t\t}\n\n\t\tif(darkModeStatus){\n\t\t\tsetDarkMode(darkModeStatus)\n\t\t}\n\t}, [])\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('react-notes-app-data', JSON.stringify(notes))\n\t\tlocalStorage.setItem('darkMode', JSON.stringify(darkMode))\n\t}, [notes, darkMode])\n\n\n\tfunction addNotes (text) {\n\t\tconst date = new Date();\n\t\tconst newNote = {\n\t\t\tid:nanoid(),\n\t\t\ttext: text,\n\t\t\tdate: date.toLocaleDateString(),\n\t\t\thour: date.toLocaleTimeString('pt-BR'),\n\t\t\tcolor: corAleatoria(),\n\t\n\t\t}\n\n\t\tconst newNotes = [...notes, newNote];\n\t\tsetNotes(newNotes);\n\t}\n\n\tfunction deleteNote(id){\n\t\tconst newNotes = notes.filter((note) => note.id !== id)\n\t\tsetNotes(newNotes);\n\t}\n\n\tfunction corAleatoria() {\n\t\tconst color = Math.floor(Math.random() * (4 - 0) + 0)\n\n\t\tif(color == 1){\n\t\t\treturn '#f6c2d9'\n\t\t}else if(color == 2){\n\t\t\treturn '#fff69b'\n\t\t}else if(color == 3){\n\t\t\treturn '#a1c8e9'\n\t\t}\n\t\telse if(color == 4){\n\t\t\treturn '#e4dae2'\n\t\t}\n\t\telse{\n\t\t\treturn '#bcdfc9'\n\t\t}\n\n\t  }\n\n\t \n\n\n\t\n\n\n\treturn(\n\n\t\t<div className={`${darkMode && 'dark-mode'}`}>\n\t\t\t<div className=\"container\">\n\t\t\t\t<Header handleToggleDarkMode={setDarkMode} />\n\t\t\t\t<Search handleSearchNote={setSearchText} />\n\n\t\t\t\t<NotesList notes={notes.filter( (note) => note.text.toLowerCase().includes(searchText))} handleAddNote={addNotes} handleDeleteNote={deleteNote}/>\n\t\t\t\t\n\n\n\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t</div>\n\t\t\t\n\t\t</div>\n\n\t)\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\n\r\nReactDOM.render(\r\n    <App />,document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}